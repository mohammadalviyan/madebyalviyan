---
import { Image } from 'astro:assets';
import { getImage } from 'astro:assets';
import { DEFAULT_CONFIGURATION } from '@/lib/constants'

interface Props {
  class?: string;
}
const { class: className } = Astro.props;

// Generate multiple formats to prevent 404 errors
const avatarFormats = [];
try {
  const avifImage = await getImage({ 
    src: DEFAULT_CONFIGURATION.author.avatar, 
    format: 'avif',
    width: 52,
    height: 52
  });
  avatarFormats.push({ src: avifImage.src, type: 'image/avif' });
} catch (e) {
  console.warn('AVIF format failed, falling back');
}

try {
  const webpImage = await getImage({ 
    src: DEFAULT_CONFIGURATION.author.avatar, 
    format: 'webp',
    width: 52,
    height: 52
  });
  avatarFormats.push({ src: webpImage.src, type: 'image/webp' });
} catch (e) {
  console.warn('WebP format failed, falling back');
}

const jpgImage = await getImage({ 
  src: DEFAULT_CONFIGURATION.author.avatar, 
  format: 'jpg',
  width: 52,
  height: 52
});
avatarFormats.push({ src: jpgImage.src, type: 'image/jpeg' });

const primaryImage = avatarFormats[0] || jpgImage;
---

<div class:list={[
  'relative rounded-full shrink-0 overflow-hidden avatar-container',
  className,
]} style="width: 52px; height: 52px; contain: layout style paint;">
  <picture>
    {avatarFormats.slice(0, -1).map(format => (
      <source srcset={format.src} type={format.type} />
    ))}
    <img
      loading="eager"
      src={primaryImage.src}
      alt={`${DEFAULT_CONFIGURATION.author.name} - Backend Engineer and Poultry Farmer`}
      width="52"
      height="52"
      class="object-cover"
      fetchpriority="high"
      decoding="sync"
      style="aspect-ratio: 1; contain: layout style paint; width: 52px; height: 52px; background-color: #f0f0f0;"
      onError="this.style.backgroundColor='#f0f0f0'; this.alt='Avatar unavailable';"
    />
  </picture>
</div>