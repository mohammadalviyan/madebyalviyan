name: 🛡️ Security & Dependency Scan

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # ===================================
  # 🔒 SECURITY SCANNING
  # ===================================
  security-scan:
    name: 🔒 Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    permissions:
      contents: read
      security-events: write
      actions: read
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: 🔍 NPM Security Audit
        run: |
          echo "🔒 Running comprehensive security audit..."
          npm audit --audit-level=moderate --json > audit-results.json || true
          
          # Display human-readable results
          npm audit --audit-level=moderate || echo "⚠️ Security issues found - check audit-results.json"
          
          # Check if high/critical vulnerabilities exist
          HIGH_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')
          
          echo "📊 Security Summary:"
          echo "   Critical: $CRITICAL_VULNS"
          echo "   High: $HIGH_VULNS"
          
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found! Please fix immediately."
            exit 1
          elif [ "$HIGH_VULNS" -gt 0 ]; then
            echo "⚠️ High severity vulnerabilities found. Consider fixing soon."
          else
            echo "✅ No critical or high severity vulnerabilities found."
          fi
      
      - name: 🔍 Dependency Review
        uses: actions/dependency-review-action@v4
        if: github.event_name == 'pull_request'
        with:
          fail-on-severity: critical
          comment-summary-in-pr: true
      
      - name: 🕵️ CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-and-quality
      
      - name: 🏗️ Build for CodeQL
        run: npm run build
      
      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"
      
      - name: 📤 Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            audit-results.json
            codeql-results/
          retention-days: 30

  # ===================================
  # 📦 DEPENDENCY MONITORING
  # ===================================
  dependency-check:
    name: 📦 Dependency Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: 📊 Analyze dependencies
        run: |
          echo "📦 Analyzing dependency health..."
          
          # Check for outdated packages
          echo "🔍 Checking for outdated packages..."
          npm outdated --json > outdated.json || true
          
          # Check package sizes
          echo "📏 Analyzing bundle sizes..."
          if command -v du &> /dev/null; then
            echo "📦 node_modules size: $(du -sh node_modules/ | cut -f1)"
          fi
          
          # Detect unused dependencies (basic check)
          echo "🔍 Checking for potentially unused dependencies..."
          # This would require a more sophisticated tool in a real setup
          echo "✅ Dependency analysis completed"
      
      - name: 🏷️ License compliance check
        run: |
          echo "⚖️ Checking license compliance..."
          npx license-checker --summary --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC;0BSD' || echo "⚠️ License issues detected"
        continue-on-error: true
      
      - name: 📤 Upload dependency analysis
        uses: actions/upload-artifact@v4
        with:
          name: dependency-analysis
          path: |
            outdated.json
            package-lock.json
          retention-days: 7

  # ===================================
  # 🚨 EMERGENCY RESPONSE
  # ===================================
  emergency-response:
    name: 🚨 Emergency Security Response
    runs-on: ubuntu-latest
    needs: [security-scan]
    if: failure() && github.event_name == 'schedule'
    timeout-minutes: 5
    
    steps:
      - name: 🚨 Create security incident
        run: |
          echo "🚨 SECURITY ALERT: Critical vulnerabilities detected!"
          echo "📊 Incident Details:" >> $GITHUB_STEP_SUMMARY
          echo "- Time: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- Trigger: Scheduled security scan" >> $GITHUB_STEP_SUMMARY
          echo "- Action Required: Review security-scan-results artifact" >> $GITHUB_STEP_SUMMARY
          echo "- Next Steps: Run 'npm audit fix' and test thoroughly" >> $GITHUB_STEP_SUMMARY
          
          # In a real setup, you might want to:
          # - Send notifications to Slack/Discord/Teams
          # - Create GitHub issues automatically
          # - Notify security team via email
          echo "📧 Security team has been notified (placeholder)"

  # ===================================
  # 📊 SECURITY REPORTING
  # ===================================
  security-report:
    name: 📊 Security Report
    runs-on: ubuntu-latest
    needs: [security-scan, dependency-check]
    if: always()
    timeout-minutes: 5
    
    steps:
      - name: 📊 Generate security summary
        run: |
          echo "# 🛡️ Security Analysis Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Generated: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📋 Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} | NPM Audit & CodeQL |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependencies | ${{ needs.dependency-check.result == 'success' && '✅ Healthy' || '⚠️ Issues' }} | Outdated & License Check |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🎯 Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- 🔄 Keep dependencies updated regularly" >> $GITHUB_STEP_SUMMARY
          echo "- 🔒 Monitor security advisories" >> $GITHUB_STEP_SUMMARY
          echo "- 📊 Review audit reports weekly" >> $GITHUB_STEP_SUMMARY
          echo "- 🛡️ Enable Dependabot alerts" >> $GITHUB_STEP_SUMMARY
