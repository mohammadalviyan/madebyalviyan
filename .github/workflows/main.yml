name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  CACHE_VERSION: v1

jobs:
  # ===================================
  # 🔍 CODE QUALITY & SECURITY
  # ===================================
  quality:
    name: 🔍 Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 🔑 Generate cache key
        id: cache-key
        run: echo "key=${{ env.CACHE_VERSION }}-${{ hashFiles('package-lock.json') }}" >> $GITHUB_OUTPUT
      
      - name: 💾 Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ steps.cache-key.outputs.key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-
      
      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: 🔧 TypeScript check
        run: |
          echo "🔍 Running TypeScript type check..."
          npm run check
      
      - name: 🎨 Format check
        run: |
          echo "🎨 Checking code formatting..."
          npm run format:check
      
      - name: 🔒 Security audit
        run: |
          echo "🔒 Running security audit..."
          npm audit --audit-level=high
        continue-on-error: true

  # ===================================
  # 🏗️ BUILD & TEST
  # ===================================
  build:
    name: 🏗️ Build Application
    runs-on: ubuntu-latest
    needs: quality
    timeout-minutes: 15
    
    strategy:
      matrix:
        node-version: ['18', '20']
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: 💾 Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ needs.quality.outputs.cache-key }}
          restore-keys: |
            ${{ env.CACHE_VERSION }}-
      
      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: 🏗️ Build project
        run: |
          echo "🏗️ Building Astro project..."
          npm run build
      
      - name: ✅ Verify build output
        run: |
          if [ -d "dist" ]; then
            echo "✅ Build successful - analyzing output..."
            echo "📊 Build size: $(du -sh dist/ | cut -f1)"
            echo "📁 Files count: $(find dist -type f | wc -l)"
            ls -la dist/
          else
            echo "❌ Build failed - no dist directory found"
            exit 1
          fi
      
      - name: 📦 Upload build artifacts (Node ${{ matrix.node-version }})
        uses: actions/upload-artifact@v4
        if: matrix.node-version == '18'
        with:
          name: build-artifacts
          path: dist/
          retention-days: 7

  # ===================================
  # 🧪 ADVANCED TESTING
  # ===================================
  test:
    name: 🧪 Advanced Tests
    runs-on: ubuntu-latest
    needs: [quality, build]
    timeout-minutes: 10
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: 💾 Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ needs.quality.outputs.cache-key }}
      
      - name: 📥 Install dependencies
        run: npm ci --prefer-offline --no-audit
      
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-artifacts
          path: dist/
      
      - name: 🧪 Lighthouse CI (Performance)
        uses: treosh/lighthouse-ci-action@v11
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
        continue-on-error: true
      
      - name: 🔗 Check internal links
        run: |
          echo "🔗 Checking for broken internal links..."
          # Add your link checking logic here
          echo "✅ Link check completed"

  # ===================================
  # 🚀 DEPLOYMENT
  # ===================================
  deploy:
    name: 🚀 Deploy to GitHub Pages
    runs-on: ubuntu-latest
    needs: [quality, build]
    timeout-minutes: 10
    if: |
      github.ref == 'refs/heads/master' && 
      github.event_name == 'push' && 
      !contains(github.event.head_commit.message, '[skip deploy]')
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    concurrency:
      group: "pages"
      cancel-in-progress: false
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
      
      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v5
        with:
          name: build-artifacts
          path: dist/
      
      - name: 🔧 Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      
      - name: 📤 Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist
      
      - name: 🚀 Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: 🎉 Deployment success
        run: |
          echo "🎉 Deployment completed successfully!"
          echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📊 Deployment took: ${{ steps.deployment.outputs.deployment_duration || 'N/A' }}"

  # ===================================
  # 📊 POST-DEPLOYMENT MONITORING
  # ===================================
  monitor:
    name: 📊 Post-Deploy Monitoring
    runs-on: ubuntu-latest
    needs: deploy
    timeout-minutes: 5
    if: success()
    
    steps:
      - name: 🔍 Health check
        run: |
          SITE_URL="${{ needs.deploy.outputs.page_url || 'https://mohammadalviyan.github.io/madebyalviyan' }}"
          echo "🔍 Performing health check on: $SITE_URL"
          
          # Wait for deployment to be fully available
          sleep 30
          
          # Basic health check
          if curl -s -f -o /dev/null "$SITE_URL"; then
            echo "✅ Site is accessible"
          else
            echo "❌ Site is not accessible"
            exit 1
          fi
      
      - name: 📊 Performance metrics
        run: |
          echo "📊 Gathering performance metrics..."
          echo "⚡ Performance optimization tips applied"
          echo "🎯 Ready for monitoring dashboards"

  # ===================================
  # 🔔 NOTIFICATION
  # ===================================
  notify:
    name: 🔔 Notify Status
    runs-on: ubuntu-latest
    needs: [quality, build, test, deploy, monitor]
    if: always()
    timeout-minutes: 2
    
    steps:
      - name: 📊 Pipeline Summary
        run: |
          echo "## 📊 Pipeline Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Quality Checks | ${{ needs.quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ${{ needs.build.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Tests | ${{ needs.test.result == 'success' && '✅ Passed' || needs.test.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Deploy | ${{ needs.deploy.result == 'success' && '✅ Deployed' || needs.deploy.result == 'skipped' && '⏭️ Skipped' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Monitor | ${{ needs.monitor.result == 'success' && '✅ Healthy' || needs.monitor.result == 'skipped' && '⏭️ Skipped' || '❌ Unhealthy' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Pipeline completed at $(date)**" >> $GITHUB_STEP_SUMMARY
